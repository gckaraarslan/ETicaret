// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ETicaret.Migrations
{
    [DbContext(typeof(ETicaretContext))]
    partial class ETicaretContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 2,
                            CountryId = 1,
                            DistrictId = 3,
                            Name = "Can İş",
                            OpenAddress1 = "Zeytinburnu Telsiz Mahalllesi",
                            OpenAddress2 = "caminin arkasi"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 6,
                            CountryId = 4,
                            DistrictId = 11,
                            Name = "Mesut iş",
                            OpenAddress1 = "Merter meydan",
                            OpenAddress2 = "caminin karsisi"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 4,
                            CountryId = 2,
                            DistrictId = 8,
                            Name = "Yılmaz iş",
                            OpenAddress1 = "Merter meydan",
                            OpenAddress2 = "emek çarşı",
                            StateId = 2
                        },
                        new
                        {
                            Id = 4,
                            CityId = 5,
                            CountryId = 3,
                            DistrictId = 10,
                            Name = "ibo iş",
                            OpenAddress1 = "maslakta meydan",
                            OpenAddress2 = "köftecinin karşısı",
                            StateId = 3
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            CountryId = 1,
                            DistrictId = 1,
                            Name = "mutlu iş",
                            OpenAddress1 = "zeytinburnu beştelsiz",
                            OpenAddress2 = "caminin çaprazı"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            CountryId = 1,
                            DistrictId = 4,
                            Name = "umut iş",
                            OpenAddress1 = "ortaköy meydan",
                            OpenAddress2 = "bilmemne konut"
                        });
                });

            modelBuilder.Entity("Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Palm Angel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mavi"
                        });
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "T-Shirt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pantolon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ayakkabı"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gömlek"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sweetshirt"
                        });
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "New York City",
                            StateId = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Los Angeles",
                            StateId = 2
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Munich",
                            StateId = 3
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 4,
                            Name = "Londra"
                        });
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("HasState")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            HasState = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            HasState = true,
                            Name = "Usa"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            HasState = true,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 4,
                            Code = 4,
                            HasState = false,
                            Name = "England"
                        });
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Kecioren"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Mamak"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            Name = "Bagcılar"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            Name = "Besiktas"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 3,
                            Name = "Manhattan"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            Name = "Brooklyn"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 4,
                            Name = "Hollywood"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 4,
                            Name = "Santa Monica"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 5,
                            Name = "Altstadt"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 5,
                            Name = "Neuhausen"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 6,
                            Name = "Greenwich"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 6,
                            Name = "Soho"
                        });
                });

            modelBuilder.Entity("ETicaret.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PASSWORD")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddressID = 1,
                            EMAIL = "gckaraarslan@gmail.com",
                            IsBlocked = true,
                            PASSWORD = "123123",
                            RoleID = 1,
                            UserID = 1,
                            Visibility = true
                        },
                        new
                        {
                            ID = 2,
                            AddressID = 2,
                            EMAIL = "galipcan.karaaslan@sahabt.com",
                            IsBlocked = true,
                            PASSWORD = "555555",
                            RoleID = 2,
                            UserID = 2,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("ETicaret.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Seller"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buyer"
                        });
                });

            modelBuilder.Entity("PaymentTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastUsageTimeOfCard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOfCardOwner")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountID = 2,
                            CVV = 355,
                            CardNumber = 88880,
                            LastUsageTimeOfCard = "22.12.2025",
                            NameOfCardOwner = "Galip Can"
                        },
                        new
                        {
                            ID = 2,
                            AccountID = 1,
                            CVV = 122,
                            CardNumber = 9999,
                            LastUsageTimeOfCard = "20.11.2030",
                            NameOfCardOwner = "Cemal"
                        });
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentCardID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityPerUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PaymentCardID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BrandID = 1,
                            CategoryID = 1,
                            Name = "Oversized T-Shirt",
                            PaymentCardID = 1,
                            QuantityPerUnit = 0,
                            UnitPrice = 15m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 2,
                            BrandID = 2,
                            CategoryID = 5,
                            Name = "Sweetshirt",
                            PaymentCardID = 2,
                            QuantityPerUnit = 0,
                            UnitPrice = 20m,
                            UnitsInStock = 10
                        });
                });

            modelBuilder.Entity("State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 2,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "California"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Name = "Bavyera"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountID = 1,
                            FirstName = "Galip Can",
                            LastName = "KARAARSLAN",
                            Name = "gckaraarslan"
                        },
                        new
                        {
                            ID = 2,
                            AccountID = 2,
                            FirstName = "Cemal",
                            LastName = "Okka",
                            Name = "Comolokko"
                        });
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.HasOne("Country", "Country")
                        .WithMany("city")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("State", "State")
                        .WithMany("city")
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ETicaret.Account", b =>
                {
                    b.HasOne("Address", "Address")
                        .WithMany("Account")
                        .HasForeignKey("AddressID");

                    b.HasOne("ETicaret.Role", "Role")
                        .WithMany("Account")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithOne("Account")
                        .HasForeignKey("ETicaret.Account", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentTransaction", b =>
                {
                    b.HasOne("ETicaret.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentTransaction", "PaymentCard")
                        .WithMany("ProductList")
                        .HasForeignKey("PaymentCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("PaymentCard");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.HasOne("Country", "Country")
                        .WithMany("state")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("city");

                    b.Navigation("state");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ETicaret.Account", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ETicaret.Role", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("PaymentTransaction", b =>
                {
                    b.Navigation("ProductList");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("city");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
